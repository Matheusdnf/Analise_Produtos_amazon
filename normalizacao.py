import pandas as pd

# ğŸ”¹ Carregar o dataset limpo
file_path = "amazon_clean.csv"
df = pd.read_csv(file_path)

# ğŸ”¹ FunÃ§Ã£o para limpar strings (remoÃ§Ã£o de espaÃ§os extras e caracteres indesejados)
def clean_text(text):
    if isinstance(text, str):
        return " ".join(text.strip().split())  # Remove espaÃ§os extras
    return text

# ğŸ”¹ Aplicar limpeza de texto nas colunas relevantes
text_columns = ["product_name", "category", "about_product", "review_title", "review_content"]
for col in text_columns:
    df[col] = df[col].apply(clean_text)

# ğŸ”¹ Remover sÃ­mbolos de moeda e converter preÃ§os para float
df["discounted_price"] = df["discounted_price"].astype(str).str.replace(r"[â‚¹,]", "", regex=True).astype(float)
df["actual_price"] = df["actual_price"].astype(str).str.replace(r"[â‚¹,]", "", regex=True).astype(float)
df["review_content"] = df["review_content"].astype(str).str.replace(r"[â‚¹,]", "", regex=True)

# ğŸ”¹ Converter desconto para nÃºmero
df["discount_percentage"] = df["discount_percentage"].astype(str).str.replace("%", "").astype(float)

# ğŸ”¹ Corrigir valores numÃ©ricos inconsistentes
df["rating"] = pd.to_numeric(df["rating"], errors="coerce").fillna(0)  # Converte para nÃºmero e preenche NaN com 0
df["rating_count"] = df["rating_count"].astype(str).str.replace(",", "")

# ğŸ”¹ Tratar valores ausentes (NaN) preenchendo com "NULL"
df.fillna("NULL", inplace=True)


# ğŸ”¹ Salvar o dataset padronizado
standardized_file_path = "amazon_normalizado.csv"
df.to_csv(standardized_file_path, index=False)

print(f"âœ… PadronizaÃ§Ã£o concluÃ­da! Arquivo salvo como {standardized_file_path}")
